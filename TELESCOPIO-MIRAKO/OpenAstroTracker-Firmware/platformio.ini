; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
include_dir = .
src_dir = ./src
lib_dir = ./src/libs
test_dir = ./unit_tests
build_cache_dir = ./build_cache

[common]
lib_deps = 
	mikalhart/TinyGPSPlus @ ^1.0.2
	teemuatlut/TMCStepper @ ^0.7.1
	waspinator/AccelStepper @ ^1.61
	arduino-libraries/LiquidCrystal @ ^1.0.7
	lincomatic/LiquidTWI2@^1.2.7
	olikraus/U8g2@^2.28.8

[env]
extra_scripts = 
	pre:pre_script_patch_debug.py
	post:post_script_remove_patched_files.py
build_unflags = 
	-Os
build_flags = 
	-D ETL_NO_STL
	-include ./src/macros/gcc/Macros.hpp
	-O2
debug_build_flags = 
	-Og
	-g2
	-D OAT_DEBUG_BUILD

[common_embedded]
framework = arduino
monitor_speed = 19200
upload_speed = 115200
test_ignore = test_native
src_filter = 
	+<*> -<../.git/> -<../test/>
	-<*/.pio/> -<*/.platformio/> -<libs/>
src_build_flags = 
	-Werror
	-Wall
	-Wextra
	-Wno-unused-parameter
	-Wlogical-op
	-Wuseless-cast
	-Wshadow
	-Wunknown-pragmas
debug_init_break = 
debug_load_mode = always

[env:ramps]
extends = common_embedded
platform = atmelavr
board = ATmega2560
upload_protocol = wiring
build_flags = 
	${env.build_flags}
	-D BOARD=BOARD_AVR_RAMPS
debug_tool = avr-stub
debug_build_flags = 
	${env.debug_build_flags}
	-D AVR8_BREAKPOINT_MODE=1
	-D AVR8_SWINT_SOURCE=7
lib_deps = 
	${common.lib_deps}
	jdolinay/avr-debugger @ 1.2
	https://github.com/andre-stefanov/avr-interrupt-stepper@0.0.2

[env:mksgenlv21]
extends = env:ramps
build_flags = 
	${env.build_flags}
	-D BOARD=BOARD_AVR_MKS_GEN_L_V21

[env:mksgenlv2]
extends = env:ramps
build_flags = 
	${env.build_flags}
	-D BOARD=BOARD_AVR_MKS_GEN_L_V2

[env:mksgenlv1]
extends = env:ramps
build_flags = 
	${env.build_flags}
	-D BOARD=BOARD_AVR_MKS_GEN_L_V1

[env:esp32]
extends = common_embedded
platform = espressif32
board = esp32dev
upload_speed = 460800
monitor_filters = esp32_exception_decoder
build_flags = 
	${env.build_flags}
	-D BOARD=BOARD_ESP32_ESP32DEV
lib_deps = 
	${common.lib_deps}
	WiFi

[env:native]
platform = native
test_ignore = test_embedded
